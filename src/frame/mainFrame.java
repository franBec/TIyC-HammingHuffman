package frame;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.WindowEvent;
import utilidades.UtilidadesArchivos;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import utilidades.UtilidadesMatematicas;

/**
 *
 * @author Fabrizio
 */
public class mainFrame extends javax.swing.JFrame {

    public static File fileInput;
    public static File fileInputHuf;
    public static File comprimido;
    public static File descomprimido;
    public static File fileOutput;

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
        this.setSize(400, 300);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        
        huffmanPanel.setSize(675, 600);
        unHammingPanel.setSize(675, 600);
        hammingPanel.setSize(675, 600);
        unHuffmanPanel.setSize(675, 600);
        
        hammingPanel.setVisible(false);
        unHammingPanel.setVisible(false);
        huffmanPanel.setVisible(false);
        unHuffmanPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel =  new FondoPanel();
        main_jButton_Salir = new javax.swing.JButton();
        main_jButton_Huffman = new javax.swing.JButton();
        main_jButton_Hamming = new javax.swing.JButton();
        main_jLabel_Titulo = new javax.swing.JLabel();
        main_jLabel_Subtitulo = new javax.swing.JLabel();
        hammingPanel = new FondoPanel();
        hamming_jButton_Regreso = new javax.swing.JButton();
        hamming_jScrollPane_ArchivoInicial = new javax.swing.JScrollPane();
        hamming_jTextPane_ArchivoInicial = new javax.swing.JTextPane();
        hamming_jScrollPane_ArchivoFinal = new javax.swing.JScrollPane();
        hamming_jTextPane_ArchivoFinal = new javax.swing.JTextPane();
        hamming_jLabel_Titulo = new javax.swing.JLabel();
        hamming_jLabel_TipoGeneracion = new javax.swing.JLabel();
        hamming_jComboBox_TipoGeneracion = new javax.swing.JComboBox<>();
        hamming_jTextField_ArchivoInicialURL = new javax.swing.JTextField();
        hamming_jTextField_ArchivoFinalURL = new javax.swing.JTextField();
        hamming_jButton_OtrasOpciones = new javax.swing.JButton();
        hamming_jComboCox_TipoCodificacion = new javax.swing.JComboBox<>();
        hamming_jButton_Generar = new javax.swing.JButton();
        hamming_jLabel_TipoCodificacion = new javax.swing.JLabel();
        unHammingPanel = new FondoPanel();
        unHamming_jButton_Regreso = new javax.swing.JButton();
        unHamming_jScrollPane_ArchivoInicial = new javax.swing.JScrollPane();
        unHamming_jTextPane_ArchivoInicial = new javax.swing.JTextPane();
        unHamming_jScrollPane_ArchivoFinal = new javax.swing.JScrollPane();
        unHamming_jTextPane_ArchivoFinal = new javax.swing.JTextPane();
        unHamming_jLabel_Titulo = new javax.swing.JLabel();
        unHamming_jLabel_CorregirErrores = new javax.swing.JLabel();
        unHamming_jComboBox_CorregirErrores = new javax.swing.JComboBox<>();
        unHamming_jTextField_ArchivoInicialURL = new javax.swing.JTextField();
        unHamming_jTextField_ArchivoFinalURL = new javax.swing.JTextField();
        unHamming_jButton_OtrasOpciones = new javax.swing.JButton();
        unHamming_jButton_Desproteger = new javax.swing.JButton();
        huffmanPanel = new FondoPanel();
        huffman_jButton_Regreso = new javax.swing.JButton();
        huffman_jScrollPane_ArchivoInicial = new javax.swing.JScrollPane();
        huffman_jTextPane_ArchivoIncial = new javax.swing.JTextPane();
        huffman_jTextField_ArchivoInicialURL = new javax.swing.JTextField();
        huffman_jTextField_ArchivoFinalURL = new javax.swing.JTextField();
        huffman_jScrollPane_ArchivoFinal = new javax.swing.JScrollPane();
        huffman_jTextPane_ArchivoFinal = new javax.swing.JTextPane();
        huffman_jLabel_Titulo = new javax.swing.JLabel();
        huffman_jButton_OtrasOpciones = new javax.swing.JButton();
        huffman_jButton_Comprimir = new javax.swing.JButton();
        unHuffmanPanel = new FondoPanel();
        unHuffman_jButton_Regreso = new javax.swing.JButton();
        unHuffman_jScrollPane_ArchivoInicial = new javax.swing.JScrollPane();
        unHuffman_jTextPane_ArchivoInicial = new javax.swing.JTextPane();
        unHuffman_jTextField_ArchivoInicialURL = new javax.swing.JTextField();
        unHuffman_jTextField_ArchivoFinalURL = new javax.swing.JTextField();
        unHuffman_jScrollPane_ArchivoFinal = new javax.swing.JScrollPane();
        unHuffman_jTextPane_ArchivoFinal = new javax.swing.JTextPane();
        unHuffman_jLabel_Titulo = new javax.swing.JLabel();
        unHuffman_jButton_OtrasOpciones = new javax.swing.JButton();
        unHuffman_jButton_Descomprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setBackground(new java.awt.Color(206, 51, 56));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        main_jButton_Salir.setText("Salir");
        main_jButton_Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_jButton_SalirActionPerformed(evt);
            }
        });
        mainPanel.add(main_jButton_Salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 232, 120, 30));

        main_jButton_Huffman.setText("Huffman");
        main_jButton_Huffman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_jButton_HuffmanActionPerformed(evt);
            }
        });
        mainPanel.add(main_jButton_Huffman, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 167, 120, 30));

        main_jButton_Hamming.setText("Hamming");
        main_jButton_Hamming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_jButton_HammingActionPerformed(evt);
            }
        });
        mainPanel.add(main_jButton_Hamming, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 102, 120, 30));

        main_jLabel_Titulo.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        main_jLabel_Titulo.setForeground(new java.awt.Color(255, 255, 255));
        main_jLabel_Titulo.setText("PROYECTO HAMMING - HUFFMAN");
        mainPanel.add(main_jLabel_Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 24, -1, -1));

        main_jLabel_Subtitulo.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        main_jLabel_Subtitulo.setForeground(new java.awt.Color(255, 255, 255));
        main_jLabel_Subtitulo.setText("2021");
        mainPanel.add(main_jLabel_Subtitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 60, -1, -1));

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        hammingPanel.setBackground(new java.awt.Color(153, 153, 255));
        hammingPanel.setFocusable(false);
        hammingPanel.setPreferredSize(new java.awt.Dimension(675, 600));
        hammingPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hamming_jButton_Regreso.setBackground(new java.awt.Color(255, 153, 0));
        hamming_jButton_Regreso.setForeground(new java.awt.Color(0, 0, 0));
        hamming_jButton_Regreso.setText("Regresar a menú principal");
        hamming_jButton_Regreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hamming_jButton_RegresoActionPerformed(evt);
            }
        });
        hammingPanel.add(hamming_jButton_Regreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 290, 30));

        hamming_jTextPane_ArchivoInicial.setFocusable(false);
        hamming_jScrollPane_ArchivoInicial.setViewportView(hamming_jTextPane_ArchivoInicial);

        hammingPanel.add(hamming_jScrollPane_ArchivoInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 290, 420));

        hamming_jTextPane_ArchivoFinal.setFocusable(false);
        hamming_jScrollPane_ArchivoFinal.setViewportView(hamming_jTextPane_ArchivoFinal);

        hammingPanel.add(hamming_jScrollPane_ArchivoFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 120, 290, 420));

        hamming_jLabel_Titulo.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        hamming_jLabel_Titulo.setForeground(new java.awt.Color(255, 255, 255));
        hamming_jLabel_Titulo.setText("Proteger Archivo");
        hammingPanel.add(hamming_jLabel_Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        hamming_jLabel_TipoGeneracion.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        hamming_jLabel_TipoGeneracion.setForeground(new java.awt.Color(255, 255, 255));
        hamming_jLabel_TipoGeneracion.setText("Tipo de generación:");
        hammingPanel.add(hamming_jLabel_TipoGeneracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, 120, 20));

        hamming_jComboBox_TipoGeneracion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sin error", "Con un error", "Con doble error" }));
        hamming_jComboBox_TipoGeneracion.setEnabled(false);
        hamming_jComboBox_TipoGeneracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hamming_jComboBox_TipoGeneracionActionPerformed(evt);
            }
        });
        hammingPanel.add(hamming_jComboBox_TipoGeneracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 40, 150, -1));

        hamming_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        hamming_jTextField_ArchivoInicialURL.setFocusable(false);
        hammingPanel.add(hamming_jTextField_ArchivoInicialURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 79, 290, 30));

        hamming_jTextField_ArchivoFinalURL.setText("ARCHIVO FINAL");
        hamming_jTextField_ArchivoFinalURL.setFocusable(false);
        hammingPanel.add(hamming_jTextField_ArchivoFinalURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, 290, 30));

        hamming_jButton_OtrasOpciones.setBackground(new java.awt.Color(255, 204, 0));
        hamming_jButton_OtrasOpciones.setForeground(new java.awt.Color(0, 0, 0));
        hamming_jButton_OtrasOpciones.setText("Otras Opciones");
        hamming_jButton_OtrasOpciones.setEnabled(false);
        hamming_jButton_OtrasOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hamming_jButton_OtrasOpcionesActionPerformed(evt);
            }
        });
        hammingPanel.add(hamming_jButton_OtrasOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 550, 140, 30));

        hamming_jComboCox_TipoCodificacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "16 Bits", "2048 Bits", "16384 Bits" }));
        hamming_jComboCox_TipoCodificacion.setEnabled(false);
        hammingPanel.add(hamming_jComboCox_TipoCodificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 150, -1));

        hamming_jButton_Generar.setBackground(new java.awt.Color(51, 204, 0));
        hamming_jButton_Generar.setForeground(new java.awt.Color(0, 0, 0));
        hamming_jButton_Generar.setText("Generar Protección");
        hamming_jButton_Generar.setEnabled(false);
        hamming_jButton_Generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hamming_jButton_GenerarActionPerformed(evt);
            }
        });
        hammingPanel.add(hamming_jButton_Generar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 550, 140, 30));

        hamming_jLabel_TipoCodificacion.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        hamming_jLabel_TipoCodificacion.setForeground(new java.awt.Color(255, 255, 255));
        hamming_jLabel_TipoCodificacion.setText("Tipo de codificacion:");
        hammingPanel.add(hamming_jLabel_TipoCodificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, 120, 20));

        getContentPane().add(hammingPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 675, 600));

        unHammingPanel.setBackground(new java.awt.Color(153, 153, 255));
        unHammingPanel.setFocusable(false);
        unHammingPanel.setPreferredSize(new java.awt.Dimension(675, 600));
        unHammingPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        unHamming_jButton_Regreso.setBackground(new java.awt.Color(255, 153, 0));
        unHamming_jButton_Regreso.setForeground(new java.awt.Color(0, 0, 0));
        unHamming_jButton_Regreso.setText("Regresar a menú principal");
        unHamming_jButton_Regreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHamming_jButton_RegresoActionPerformed(evt);
            }
        });
        unHammingPanel.add(unHamming_jButton_Regreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 290, 30));

        unHamming_jTextPane_ArchivoInicial.setFocusable(false);
        unHamming_jScrollPane_ArchivoInicial.setViewportView(unHamming_jTextPane_ArchivoInicial);

        unHammingPanel.add(unHamming_jScrollPane_ArchivoInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 290, 420));

        unHamming_jTextPane_ArchivoFinal.setFocusable(false);
        unHamming_jScrollPane_ArchivoFinal.setViewportView(unHamming_jTextPane_ArchivoFinal);

        unHammingPanel.add(unHamming_jScrollPane_ArchivoFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 290, 420));

        unHamming_jLabel_Titulo.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        unHamming_jLabel_Titulo.setForeground(new java.awt.Color(255, 255, 255));
        unHamming_jLabel_Titulo.setText("Desproteger Archivo");
        unHammingPanel.add(unHamming_jLabel_Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        unHamming_jLabel_CorregirErrores.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        unHamming_jLabel_CorregirErrores.setForeground(new java.awt.Color(255, 255, 255));
        unHamming_jLabel_CorregirErrores.setText("¿Corregir errores?");
        unHammingPanel.add(unHamming_jLabel_CorregirErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, 120, 20));

        unHamming_jComboBox_CorregirErrores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SI", "NO" }));
        unHamming_jComboBox_CorregirErrores.setEnabled(false);
        unHamming_jComboBox_CorregirErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHamming_jComboBox_CorregirErroresActionPerformed(evt);
            }
        });
        unHammingPanel.add(unHamming_jComboBox_CorregirErrores, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 30, 100, -1));

        unHamming_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        unHamming_jTextField_ArchivoInicialURL.setFocusable(false);
        unHamming_jTextField_ArchivoInicialURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHamming_jTextField_ArchivoInicialURLActionPerformed(evt);
            }
        });
        unHammingPanel.add(unHamming_jTextField_ArchivoInicialURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 79, 290, 30));

        unHamming_jTextField_ArchivoFinalURL.setText("ARCHIVO FINAL");
        unHamming_jTextField_ArchivoFinalURL.setFocusable(false);
        unHammingPanel.add(unHamming_jTextField_ArchivoFinalURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 290, 30));

        unHamming_jButton_OtrasOpciones.setBackground(new java.awt.Color(255, 204, 0));
        unHamming_jButton_OtrasOpciones.setForeground(new java.awt.Color(0, 0, 0));
        unHamming_jButton_OtrasOpciones.setText("Otras Opciones");
        unHamming_jButton_OtrasOpciones.setEnabled(false);
        unHamming_jButton_OtrasOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHamming_jButton_OtrasOpcionesActionPerformed(evt);
            }
        });
        unHammingPanel.add(unHamming_jButton_OtrasOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 550, 145, 30));

        unHamming_jButton_Desproteger.setBackground(new java.awt.Color(51, 204, 0));
        unHamming_jButton_Desproteger.setForeground(new java.awt.Color(0, 0, 0));
        unHamming_jButton_Desproteger.setText("Desproteger Archivo");
        unHamming_jButton_Desproteger.setEnabled(false);
        unHamming_jButton_Desproteger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHamming_jButton_DesprotegerActionPerformed(evt);
            }
        });
        unHammingPanel.add(unHamming_jButton_Desproteger, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 145, 30));

        getContentPane().add(unHammingPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 675, 600));

        huffmanPanel.setBackground(new java.awt.Color(153, 153, 255));
        huffmanPanel.setMinimumSize(new java.awt.Dimension(1000, 600));
        huffmanPanel.setPreferredSize(new java.awt.Dimension(675, 600));
        huffmanPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        huffman_jButton_Regreso.setBackground(new java.awt.Color(255, 153, 0));
        huffman_jButton_Regreso.setForeground(new java.awt.Color(0, 0, 0));
        huffman_jButton_Regreso.setText("Regresar a menú principal");
        huffman_jButton_Regreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                huffman_jButton_RegresoActionPerformed(evt);
            }
        });
        huffmanPanel.add(huffman_jButton_Regreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 290, 30));

        huffman_jTextPane_ArchivoIncial.setFocusable(false);
        huffman_jScrollPane_ArchivoInicial.setViewportView(huffman_jTextPane_ArchivoIncial);

        huffmanPanel.add(huffman_jScrollPane_ArchivoInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 290, 420));

        huffman_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        huffman_jTextField_ArchivoInicialURL.setFocusable(false);
        huffmanPanel.add(huffman_jTextField_ArchivoInicialURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 79, 290, 30));

        huffman_jTextField_ArchivoFinalURL.setText("ARCHIVO COMPRIMIDO");
        huffman_jTextField_ArchivoFinalURL.setFocusable(false);
        huffmanPanel.add(huffman_jTextField_ArchivoFinalURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 290, 30));

        huffman_jTextPane_ArchivoFinal.setFocusable(false);
        huffman_jScrollPane_ArchivoFinal.setViewportView(huffman_jTextPane_ArchivoFinal);

        huffmanPanel.add(huffman_jScrollPane_ArchivoFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 290, 420));

        huffman_jLabel_Titulo.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        huffman_jLabel_Titulo.setForeground(new java.awt.Color(255, 255, 255));
        huffman_jLabel_Titulo.setText("Compresión por Huffman ");
        huffmanPanel.add(huffman_jLabel_Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, 50));

        huffman_jButton_OtrasOpciones.setBackground(new java.awt.Color(66, 215, 47));
        huffman_jButton_OtrasOpciones.setForeground(new java.awt.Color(0, 0, 0));
        huffman_jButton_OtrasOpciones.setText("Otras Opciones");
        huffman_jButton_OtrasOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                huffman_jButton_OtrasOpcionesActionPerformed(evt);
            }
        });
        huffmanPanel.add(huffman_jButton_OtrasOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 550, 140, 30));

        huffman_jButton_Comprimir.setBackground(new java.awt.Color(255, 51, 51));
        huffman_jButton_Comprimir.setForeground(new java.awt.Color(0, 0, 0));
        huffman_jButton_Comprimir.setText("Comprimir");
        huffman_jButton_Comprimir.setEnabled(false);
        huffman_jButton_Comprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                huffman_jButton_ComprimirActionPerformed(evt);
            }
        });
        huffmanPanel.add(huffman_jButton_Comprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 140, 30));

        getContentPane().add(huffmanPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 675, 600));

        unHuffmanPanel.setBackground(new java.awt.Color(153, 153, 255));
        unHuffmanPanel.setMinimumSize(new java.awt.Dimension(1000, 600));
        unHuffmanPanel.setPreferredSize(new java.awt.Dimension(675, 600));
        unHuffmanPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        unHuffman_jButton_Regreso.setBackground(new java.awt.Color(255, 153, 0));
        unHuffman_jButton_Regreso.setForeground(new java.awt.Color(0, 0, 0));
        unHuffman_jButton_Regreso.setText("Regresar a menú principal");
        unHuffman_jButton_Regreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHuffman_jButton_RegresoActionPerformed(evt);
            }
        });
        unHuffmanPanel.add(unHuffman_jButton_Regreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 550, 290, 30));

        unHuffman_jTextPane_ArchivoInicial.setFocusable(false);
        unHuffman_jScrollPane_ArchivoInicial.setViewportView(unHuffman_jTextPane_ArchivoInicial);

        unHuffmanPanel.add(unHuffman_jScrollPane_ArchivoInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 290, 420));

        unHuffman_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        unHuffman_jTextField_ArchivoInicialURL.setFocusable(false);
        unHuffmanPanel.add(unHuffman_jTextField_ArchivoInicialURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 79, 290, 30));

        unHuffman_jTextField_ArchivoFinalURL.setText("ARCHIVO DESCOMPRIMIDO");
        unHuffman_jTextField_ArchivoFinalURL.setFocusable(false);
        unHuffmanPanel.add(unHuffman_jTextField_ArchivoFinalURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 300, 30));

        unHuffman_jTextPane_ArchivoFinal.setFocusable(false);
        unHuffman_jScrollPane_ArchivoFinal.setViewportView(unHuffman_jTextPane_ArchivoFinal);

        unHuffmanPanel.add(unHuffman_jScrollPane_ArchivoFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, 300, 420));

        unHuffman_jLabel_Titulo.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        unHuffman_jLabel_Titulo.setForeground(new java.awt.Color(255, 255, 255));
        unHuffman_jLabel_Titulo.setText("Descomprimir Archivo");
        unHuffmanPanel.add(unHuffman_jLabel_Titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, 50));

        unHuffman_jButton_OtrasOpciones.setBackground(new java.awt.Color(66, 215, 47));
        unHuffman_jButton_OtrasOpciones.setForeground(new java.awt.Color(0, 0, 0));
        unHuffman_jButton_OtrasOpciones.setText("Otras Opciones");
        unHuffman_jButton_OtrasOpciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHuffman_jButton_OtrasOpcionesActionPerformed(evt);
            }
        });
        unHuffmanPanel.add(unHuffman_jButton_OtrasOpciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 550, 150, 30));

        unHuffman_jButton_Descomprimir.setBackground(new java.awt.Color(255, 51, 51));
        unHuffman_jButton_Descomprimir.setForeground(new java.awt.Color(0, 0, 0));
        unHuffman_jButton_Descomprimir.setText("Descomprimir archivo");
        unHuffman_jButton_Descomprimir.setEnabled(false);
        unHuffman_jButton_Descomprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unHuffman_jButton_DescomprimirActionPerformed(evt);
            }
        });
        unHuffmanPanel.add(unHuffman_jButton_Descomprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, 150, 30));

        getContentPane().add(unHuffmanPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 675, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void main_jButton_SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_jButton_SalirActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_main_jButton_SalirActionPerformed

    private void goTo_hamming(JPanel panelActual){
        fileInput = UtilidadesArchivos.seleccionarArchivo();
        if (fileInput != null) {
            try {
                hamming_jTextField_ArchivoInicialURL.setText(fileInput.getAbsolutePath());
                hamming_jTextPane_ArchivoInicial.setText(UtilidadesArchivos.archivoToString(fileInput.getAbsolutePath()));
                hamming_jComboBox_TipoGeneracion.setEnabled(true);
                hamming_jComboCox_TipoCodificacion.setEnabled(true);
                hamming_jButton_Generar.setEnabled(true);
                panelActual.setVisible(false);
                this.setSize(675, 600);
                this.setLocationRelativeTo(null);
                hammingPanel.setVisible(true);
                hamming_jButton_OtrasOpciones.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            hamming_jButton_Generar.setEnabled(false);
        }
        
    }
    
    private void goTo_unHamming(JPanel panelActual){
        fileInput = UtilidadesArchivos.seleccionarArchivo();
        if (fileInput != null && utilidades.UtilidadesArchivos.checkHammingExtension(fileInput.getName())) {
            try {
                unHamming_jTextField_ArchivoInicialURL.setText(fileInput.getAbsolutePath());
                unHamming_jTextPane_ArchivoInicial.setText(UtilidadesArchivos.archivoToString(fileInput.getAbsolutePath()));
                unHamming_jButton_Desproteger.setEnabled(true);
                unHamming_jComboBox_CorregirErrores.setEnabled(true);
                panelActual.setVisible(false);
                this.setSize(675, 600);
                this.setLocationRelativeTo(null);
                unHammingPanel.setVisible(true);
                unHamming_jButton_OtrasOpciones.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else{
            if(fileInput != null && !utilidades.UtilidadesArchivos.checkHammingExtension(fileInput.getName())){
                JOptionPane.showMessageDialog(null, "La extensión no corresponde a un archivo valido", "Extensión inválida", JOptionPane.ERROR_MESSAGE);
            }
            unHamming_jButton_Desproteger.setEnabled(false);
        }
        
    }
    
    private void goTo_huffman(JPanel panelActual){
        fileInputHuf = UtilidadesArchivos.seleccionarArchivo();
        if (fileInputHuf != null) {
            try {
                huffman_jTextField_ArchivoInicialURL.setText(fileInputHuf.getAbsolutePath()); 
                huffman_jTextPane_ArchivoIncial.setText(UtilidadesArchivos.archivoToString(fileInputHuf.getAbsolutePath()));
                huffman_jButton_Comprimir.setEnabled(true);
                panelActual.setVisible(false);
                this.setSize(675, 600);
                this.setLocationRelativeTo(null);
                huffmanPanel.setVisible(true);
                huffman_jButton_OtrasOpciones.setEnabled(true);
            } catch (IOException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }    
        }
        else{
            huffman_jButton_Comprimir.setEnabled(false);
        }
        
    }
    
    private void goTo_unHuffman(JPanel panelActual){
        comprimido = UtilidadesArchivos.seleccionarArchivo();
        if (comprimido != null && utilidades.UtilidadesArchivos.checkHuffmanExtension(comprimido.getName())) {
            try {
                unHuffman_jTextPane_ArchivoInicial.setText(UtilidadesArchivos.archivoToString(comprimido.getAbsolutePath()));
                unHuffman_jTextField_ArchivoInicialURL.setText(comprimido.getAbsolutePath());
                unHuffman_jButton_Descomprimir.setEnabled(true);
                panelActual.setVisible(false);
                this.setSize(675, 600);
                this.setLocationRelativeTo(null);
                unHuffmanPanel.setVisible(true);
                unHuffman_jButton_OtrasOpciones.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            if (comprimido != null && !utilidades.UtilidadesArchivos.checkHuffmanExtension(comprimido.getName())) {
                JOptionPane.showMessageDialog(null, "La extensión no corresponde a un archivo valido", "Extensión inválida", JOptionPane.ERROR_MESSAGE);
            }
            unHuffman_jButton_Descomprimir.setEnabled(false);
        }
        
    }
    
    private void hamming_limpiarActionPerformed(){
        hamming_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        hamming_jTextField_ArchivoFinalURL.setText("ARCHIVO CODIFICADO");
        hamming_jTextPane_ArchivoInicial.setText("");
        hamming_jTextPane_ArchivoFinal.setText("");
        hamming_jButton_Generar.setEnabled(false);
        //hamming_jButton_OtrasOpciones.setEnabled(false);
        hamming_jComboBox_TipoGeneracion.setSelectedIndex(0);
        hamming_jComboBox_TipoGeneracion.setEnabled(false);
        hamming_jComboCox_TipoCodificacion.setEnabled(false);
    }
    
    private void huffman_limpiarActionPerformed(){
        huffman_jButton_Comprimir.setEnabled(false);
        //huffman_jButton_OtrasOpciones.setEnabled(false);
        huffman_jTextPane_ArchivoIncial.setText("");
        huffman_jTextPane_ArchivoFinal.setText("");
        huffman_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        huffman_jTextField_ArchivoFinalURL.setText("ARCHIVO COMPRIMIDO");
    }
    
    private void unHamming_limpiarActionPerformed(){
        unHamming_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        unHamming_jTextField_ArchivoFinalURL.setText("ARCHIVO FINAL");
        unHamming_jTextPane_ArchivoInicial.setText("");
        unHamming_jTextPane_ArchivoFinal.setText("");
        unHamming_jComboBox_CorregirErrores.setSelectedIndex(0);
        unHamming_jComboBox_CorregirErrores.setEnabled(false);
        unHamming_jButton_Desproteger.setEnabled(false);
        //unHamming_jButton_OtrasOpciones.setEnabled(false);
    }
    
    private void unHuffman_limpiarActionPerformed(){
        unHuffman_jButton_Descomprimir.setEnabled(false);
        //unHuffman_jButton_OtrasOpciones.setEnabled(false);
        unHuffman_jTextPane_ArchivoInicial.setText("");
        unHuffman_jTextPane_ArchivoFinal.setText("");
        huffman_jTextField_ArchivoInicialURL.setText("ARCHIVO INICIAL");
        huffman_jTextField_ArchivoFinalURL.setText("ARCHIVO DESCOMPRIMIDO");
    }
    
    private void main_jButton_HammingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_jButton_HammingActionPerformed
        String[] options = {"Proteger archivo", "Desproteger archivo"};
        int x = JOptionPane.showOptionDialog(null, "¿Qué desea realizar?", "Seleccione una opción", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if (x != -1) {
            JOptionPane.showMessageDialog(null, "A continuación seleccione el archivo con el que desea trabajar.", "Seleccion de archivo", JOptionPane.INFORMATION_MESSAGE);
            if (x == 0)
                goTo_hamming(mainPanel);
            else
                goTo_unHamming(mainPanel);   
            
        }
    }//GEN-LAST:event_main_jButton_HammingActionPerformed

    private void hamming_jButton_RegresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hamming_jButton_RegresoActionPerformed
        hamming_limpiarActionPerformed();
        mainPanel.setVisible(true);
        hammingPanel.setVisible(false);
        this.setSize(400, 300);
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_hamming_jButton_RegresoActionPerformed

    private void hamming_jButton_OtrasOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hamming_jButton_OtrasOpcionesActionPerformed
        String[] options = {"Limpiar y proteger un nuevo archivo", "Desproteger un archivo"};
        int x = JOptionPane.showOptionDialog(null, "¿Qué desea realizar?", "Seleccione una opción", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if (x != -1) {
            hamming_limpiarActionPerformed();
            if(x==0)
                goTo_hamming(hammingPanel);   
            else
                goTo_unHamming(hammingPanel);
            
        }
    }//GEN-LAST:event_hamming_jButton_OtrasOpcionesActionPerformed
    
    private void main_jButton_HuffmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_jButton_HuffmanActionPerformed
        String[] options = {"Comprimir archivo", "Descomprimir archivo"};
        int x = JOptionPane.showOptionDialog(null, "¿Qué desea realizar?", "Seleccione una opción", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if (x != -1) {
            JOptionPane.showMessageDialog(null, "A continuación seleccione el archivo con el que desea trabajar.", "Seleccion de archivo", JOptionPane.INFORMATION_MESSAGE);
            if (x == 0) {
                goTo_huffman(mainPanel);
            }
            else {
                goTo_unHuffman(mainPanel);
            }
        }
    }//GEN-LAST:event_main_jButton_HuffmanActionPerformed

    private void huffman_jButton_RegresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_huffman_jButton_RegresoActionPerformed
        huffman_limpiarActionPerformed();
        mainPanel.setVisible(true);
        huffmanPanel.setVisible(false);
        this.setSize(400, 300);
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_huffman_jButton_RegresoActionPerformed

    private void huffman_jButton_OtrasOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_huffman_jButton_OtrasOpcionesActionPerformed
        String[] options = {"Limpiar y comprimir un nuevo archivo", "Descomprimir un archivo"};
        int x = JOptionPane.showOptionDialog(null, "¿Qué desea realizar?", "Seleccione una opción", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if (x != -1) {
            huffman_limpiarActionPerformed();
            if(x==0)
                goTo_huffman(huffmanPanel);   
            else
                goTo_unHuffman(huffmanPanel);
        }
        
    }//GEN-LAST:event_huffman_jButton_OtrasOpcionesActionPerformed
    
    private void huffman_jButton_ComprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_huffman_jButton_ComprimirActionPerformed
        try {
            comprimido = UtilidadesArchivos.crearArchivoHuffman(fileInputHuf, utilidades.UtilidadesArchivos.ExtensionHuffman.huf);
            huffman.Huffman.beginHuffman(fileInputHuf.getAbsolutePath(), comprimido.getAbsolutePath());
            huffman_jTextField_ArchivoFinalURL.setText(comprimido.getAbsolutePath());
            huffman_jTextPane_ArchivoFinal.setText(UtilidadesArchivos.archivoToString(comprimido.getAbsolutePath()));
            huffman_jButton_Comprimir.setEnabled(false);
            long peso0 = fileInputHuf.length();
            long peso1 = comprimido.length();
            double porcentaje = (1 - ((double) peso1 / (double) peso0)) * 100;
            JOptionPane.showMessageDialog(null, "Los tamaños de descompresión son:\n"
                    + "-- Tamaño del archivo original: " + peso0 + " Bytes\n"
                    + "-- Tamaño del archivo comprimido: " + peso1 + " Bytes\n"
                    + "-- El porcentaje de compresion logrado es: " + UtilidadesMatematicas.redondeo(porcentaje, 2) + "%", "Estadisticas", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_huffman_jButton_ComprimirActionPerformed

    private void hamming_jButton_GenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hamming_jButton_GenerarActionPerformed
        int hammingNumber = 0, cantidadErrores = 0, contadorErrores;
        switch (hamming_jComboCox_TipoCodificacion.getSelectedIndex()) {
            case 0 -> {
                hammingNumber = 16;
            }
            case 1 -> {
                hammingNumber = 2048;
            }
            case 2 -> {
                hammingNumber = 16384;
            }
        }
        fileOutput = utilidades.UtilidadesArchivos.crearArchivoHamming(fileInput, utilidades.UtilidadesArchivos.ExtensionHamming.HE, hammingNumber);

        switch (hamming_jComboBox_TipoGeneracion.getSelectedIndex()) {
            case 0 -> {
                cantidadErrores = 0; //sin errores
            }
            case 1 -> {
                cantidadErrores = 1; //único error
            }
            case 2 -> {
                cantidadErrores = 2; //doble error
            }
        }

        try {
            //HAMMING
            hamming.Hamming.beginHamming(fileInput, fileOutput, hammingNumber, cantidadErrores);
            hamming_jTextField_ArchivoFinalURL.setText(fileOutput.getAbsolutePath());
            hamming_jTextPane_ArchivoFinal.setText(UtilidadesArchivos.archivoToString(fileOutput.getAbsolutePath()));
            hamming_jButton_Generar.setEnabled(false);
            //JOptionPane.showMessageDialog(null, "LA CANTIDAD DE ERRORES ES: " + contadorErrores, "Estadisticas", JOptionPane.INFORMATION_MESSAGE);
            muestraEstadisticasHamming();
            
        } catch (IOException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_hamming_jButton_GenerarActionPerformed

    private void muestraEstadisticasHamming(){
        long sizeOriginal = fileInput.length();
        long sizeProtegido = fileOutput.length();
        double porcentaje = (((double) sizeProtegido / (double) sizeOriginal) - 1) * 100;
        double redundancia = ((double)hamming.Hamming.contadorBitsAgregados/(double)(sizeOriginal*8))+1;
        JOptionPane.showMessageDialog(
                null,
                "Las Estadísticas son:\n--El tamaño del archivo original es: "+sizeOriginal+" bytes"+
                "\n--El tamaño del archivo protegido es: "+sizeProtegido+" bytes"+
                "\n--Porcentaje de incremento del tamaño = "+UtilidadesMatematicas.redondeo(porcentaje, 2)+
                "%\n\n--Cantidad de bloques: "+hamming.Hamming.contadorBloques+
                "\n--Cantidad de bits de informacion: "+sizeOriginal*8+
                "\n--Cantidad de errores introducidos: "+hamming.Hamming.contadorErrores+
                "\n--Cantidad de bits agregados: "+hamming.Hamming.contadorBitsAgregados+
                "\n--Redundancia: "+ UtilidadesMatematicas.redondeo(redundancia,2),
                "Estadisticas de protección",
                JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void hamming_jComboBox_TipoGeneracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hamming_jComboBox_TipoGeneracionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hamming_jComboBox_TipoGeneracionActionPerformed

    private void unHamming_jButton_RegresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHamming_jButton_RegresoActionPerformed
        unHamming_limpiarActionPerformed();
        unHammingPanel.setVisible(false);
        mainPanel.setVisible(true);
        this.setSize(400, 300);
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_unHamming_jButton_RegresoActionPerformed

    private void unHamming_jButton_OtrasOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHamming_jButton_OtrasOpcionesActionPerformed
        String[] options = {"Limpiar y desproteger un nuevo archivo", "Proteger un archivo"};
        int x = JOptionPane.showOptionDialog(null, "¿Qué desea realizar?", "Seleccione una opción", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if (x != -1) {
            unHamming_limpiarActionPerformed();
            if(x==0)
                goTo_unHamming(unHammingPanel);   
            else
                goTo_hamming(unHammingPanel);   
        }
    }//GEN-LAST:event_unHamming_jButton_OtrasOpcionesActionPerformed
    
    private void unHamming_jButton_DesprotegerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHamming_jButton_DesprotegerActionPerformed
        int hammingNumber = 0;
        switch (unHamming_jTextField_ArchivoInicialURL.getText().split("\\.")[1]) {
            case "HE16" -> {
                hammingNumber = 16;
            }
            case "HE2048" -> {
                hammingNumber = 2048;
            }
            case "HE16384" -> {
                hammingNumber = 16384;
            }
            case "fHE16" -> {
                hammingNumber = 16;
            }
            case "fHE2048" -> {
                hammingNumber = 2048;
            }
            case "fHE16384" -> {
                hammingNumber = 16384;
            }
        }

        if (unHamming_jComboBox_CorregirErrores.getSelectedIndex() == 0) {
            try {
                //corregir errores
                fileOutput = utilidades.UtilidadesArchivos.crearArchivoHamming(fileInput, utilidades.UtilidadesArchivos.ExtensionHamming.DC, hammingNumber);
                hamming.Hamming.beginUnHamming(fileInput, fileOutput, hammingNumber, true);
                if(hamming.Hamming.dobleError){
                    JOptionPane.showMessageDialog(null, "Se ha detectado doble error en la desprotección.\nEs probable que el arhicvo desprotegido tenga errores", "Doble error", JOptionPane.ERROR_MESSAGE);
                }
                unHamming_jTextField_ArchivoFinalURL.setText(fileOutput.getAbsolutePath());
                unHamming_jTextPane_ArchivoFinal.setText(UtilidadesArchivos.archivoToString(fileOutput.getAbsolutePath()));
            } catch (IOException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            try {
                //sin corregir errores
                fileOutput = utilidades.UtilidadesArchivos.crearArchivoHamming(fileInput, utilidades.UtilidadesArchivos.ExtensionHamming.DE, hammingNumber);
                hamming.Hamming.beginUnHamming(fileInput, fileOutput, hammingNumber, false);
                unHamming_jTextField_ArchivoFinalURL.setText(fileOutput.getAbsolutePath());
                unHamming_jTextPane_ArchivoFinal.setText(UtilidadesArchivos.archivoToString(fileOutput.getAbsolutePath()));
            } catch (IOException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        unHamming_jComboBox_CorregirErrores.setSelectedIndex(0);
        unHamming_jComboBox_CorregirErrores.setEnabled(false);
        unHamming_jButton_Desproteger.setEnabled(false);


    }//GEN-LAST:event_unHamming_jButton_DesprotegerActionPerformed

    private void unHamming_jComboBox_CorregirErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHamming_jComboBox_CorregirErroresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unHamming_jComboBox_CorregirErroresActionPerformed

    private void unHamming_jTextField_ArchivoInicialURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHamming_jTextField_ArchivoInicialURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unHamming_jTextField_ArchivoInicialURLActionPerformed

    private void unHuffman_jButton_RegresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHuffman_jButton_RegresoActionPerformed
        unHuffman_limpiarActionPerformed();
        mainPanel.setVisible(true);
        unHuffmanPanel.setVisible(false);
        this.setSize(400, 300);
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_unHuffman_jButton_RegresoActionPerformed

    private void unHuffman_jButton_OtrasOpcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHuffman_jButton_OtrasOpcionesActionPerformed
        String[] options = {"Limpiar y descomprimir un nuevo archivo", "Comprimir un archivo"};
        int x = JOptionPane.showOptionDialog(null, "¿Qué desea realizar?", "Seleccione una opción", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if (x != -1) {
            unHuffman_limpiarActionPerformed();
            if(x==0)
                goTo_unHuffman(unHuffmanPanel);   
            else
                goTo_huffman(unHuffmanPanel);
        }        
    }//GEN-LAST:event_unHuffman_jButton_OtrasOpcionesActionPerformed
    
    private void unHuffman_jButton_DescomprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unHuffman_jButton_DescomprimirActionPerformed
        try {
            descomprimido = UtilidadesArchivos.crearArchivoHuffman(comprimido, utilidades.UtilidadesArchivos.ExtensionHuffman.dhu);
            huffman.Huffman.decodeHuffman(comprimido.getAbsolutePath(), descomprimido.getAbsolutePath());
            unHuffman_jTextField_ArchivoFinalURL.setText(descomprimido.getAbsolutePath());
            unHuffman_jTextPane_ArchivoFinal.setText(UtilidadesArchivos.archivoToString(descomprimido.getAbsolutePath()));
            long peso0 = comprimido.length();
            long peso1 = descomprimido.length();
            double porcentaje = (1 - ((double) peso0 / (double) peso1)) * 100;
            JOptionPane.showMessageDialog(null, "Los tamaños de descompresión son:\n"
                    + "-- Tamaño del archivo comprimido: " + peso0 + " Bytes\n"
                    + "-- Tamaño del archivo descomprimido: " + peso1 + " Bytes\n"
                    + "-- El porcentaje de compresion logrado es: " + UtilidadesMatematicas.redondeo(porcentaje, 2) + "%", "Estadisticas", JOptionPane.INFORMATION_MESSAGE);
            unHuffman_jButton_Descomprimir.setEnabled(false);
        } catch (IOException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_unHuffman_jButton_DescomprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new RunnableImpl());
    }
    
    class FondoPanel extends JPanel{
        private Image imagen;

        public void paint(Graphics g)
        {
            imagen = new ImageIcon("mainFondo.gif").getImage();
            
            g.drawImage(imagen,0, 0, getWidth(), getHeight(),this);
            
            setOpaque(false);
            
            super.paint(g);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel hammingPanel;
    private javax.swing.JButton hamming_jButton_Generar;
    private javax.swing.JButton hamming_jButton_OtrasOpciones;
    private javax.swing.JButton hamming_jButton_Regreso;
    private javax.swing.JComboBox<String> hamming_jComboBox_TipoGeneracion;
    private javax.swing.JComboBox<String> hamming_jComboCox_TipoCodificacion;
    private javax.swing.JLabel hamming_jLabel_TipoCodificacion;
    private javax.swing.JLabel hamming_jLabel_TipoGeneracion;
    private javax.swing.JLabel hamming_jLabel_Titulo;
    private javax.swing.JScrollPane hamming_jScrollPane_ArchivoFinal;
    private javax.swing.JScrollPane hamming_jScrollPane_ArchivoInicial;
    private javax.swing.JTextField hamming_jTextField_ArchivoFinalURL;
    private javax.swing.JTextField hamming_jTextField_ArchivoInicialURL;
    private javax.swing.JTextPane hamming_jTextPane_ArchivoFinal;
    private javax.swing.JTextPane hamming_jTextPane_ArchivoInicial;
    private javax.swing.JPanel huffmanPanel;
    private javax.swing.JButton huffman_jButton_Comprimir;
    private javax.swing.JButton huffman_jButton_OtrasOpciones;
    private javax.swing.JButton huffman_jButton_Regreso;
    private javax.swing.JLabel huffman_jLabel_Titulo;
    private javax.swing.JScrollPane huffman_jScrollPane_ArchivoFinal;
    private javax.swing.JScrollPane huffman_jScrollPane_ArchivoInicial;
    private javax.swing.JTextField huffman_jTextField_ArchivoFinalURL;
    private javax.swing.JTextField huffman_jTextField_ArchivoInicialURL;
    private javax.swing.JTextPane huffman_jTextPane_ArchivoFinal;
    private javax.swing.JTextPane huffman_jTextPane_ArchivoIncial;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton main_jButton_Hamming;
    private javax.swing.JButton main_jButton_Huffman;
    private javax.swing.JButton main_jButton_Salir;
    private javax.swing.JLabel main_jLabel_Subtitulo;
    private javax.swing.JLabel main_jLabel_Titulo;
    private javax.swing.JPanel unHammingPanel;
    private javax.swing.JButton unHamming_jButton_Desproteger;
    private javax.swing.JButton unHamming_jButton_OtrasOpciones;
    private javax.swing.JButton unHamming_jButton_Regreso;
    private javax.swing.JComboBox<String> unHamming_jComboBox_CorregirErrores;
    private javax.swing.JLabel unHamming_jLabel_CorregirErrores;
    private javax.swing.JLabel unHamming_jLabel_Titulo;
    private javax.swing.JScrollPane unHamming_jScrollPane_ArchivoFinal;
    private javax.swing.JScrollPane unHamming_jScrollPane_ArchivoInicial;
    private javax.swing.JTextField unHamming_jTextField_ArchivoFinalURL;
    private javax.swing.JTextField unHamming_jTextField_ArchivoInicialURL;
    private javax.swing.JTextPane unHamming_jTextPane_ArchivoFinal;
    private javax.swing.JTextPane unHamming_jTextPane_ArchivoInicial;
    private javax.swing.JPanel unHuffmanPanel;
    private javax.swing.JButton unHuffman_jButton_Descomprimir;
    private javax.swing.JButton unHuffman_jButton_OtrasOpciones;
    private javax.swing.JButton unHuffman_jButton_Regreso;
    private javax.swing.JLabel unHuffman_jLabel_Titulo;
    private javax.swing.JScrollPane unHuffman_jScrollPane_ArchivoFinal;
    private javax.swing.JScrollPane unHuffman_jScrollPane_ArchivoInicial;
    private javax.swing.JTextField unHuffman_jTextField_ArchivoFinalURL;
    private javax.swing.JTextField unHuffman_jTextField_ArchivoInicialURL;
    private javax.swing.JTextPane unHuffman_jTextPane_ArchivoFinal;
    private javax.swing.JTextPane unHuffman_jTextPane_ArchivoInicial;
    // End of variables declaration//GEN-END:variables

    private static class RunnableImpl implements Runnable {

        public RunnableImpl() {
        }

        @Override
        public void run() {
            new mainFrame().setVisible(true);
        }
    }
}
